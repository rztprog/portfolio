import e from"assert";import"estraverse";import s from"./reference.js";import t from"./variable.js";import"./definition.js";import n from"./scope.js";import r from"./scope-manager.js";import"esrecurse";import"./pattern-visitor.js";import i from"./referencer.js";var a={name:"eslint-scope",description:"ECMAScript scope analyzer for ESLint",homepage:"http://github.com/eslint/eslint-scope",main:"lib/index.js",version:"4.0.3",engines:{node:">=4.0.0"},repository:"eslint/eslint-scope",bugs:{url:"https://github.com/eslint/eslint-scope/issues"},license:"BSD-2-Clause",scripts:{test:"node Makefile.js test",lint:"node Makefile.js lint","generate-release":"eslint-generate-release","generate-alpharelease":"eslint-generate-prerelease alpha","generate-betarelease":"eslint-generate-prerelease beta","generate-rcrelease":"eslint-generate-prerelease rc","publish-release":"eslint-publish-release"},files:["LICENSE","README.md","lib"],dependencies:{esrecurse:"^4.1.0",estraverse:"^4.1.1"},devDependencies:{chai:"^3.4.1",eslint:"^3.15.0","eslint-config-eslint":"^4.0.0","eslint-release":"^1.0.0",espree:"^3.1.1",istanbul:"^0.4.5",mocha:"^3.2.0","npm-license":"^0.3.3",shelljs:"^0.7.6",typescript:"~2.0.10","typescript-eslint-parser":"^1.0.0"}};var o={};const l=e;const c=r;const p=i;const f=s;const u=t;const m=n.Scope;const d=a.version;function defaultOptions(){return{optimistic:false,directive:false,nodejsScope:false,impliedStrict:false,sourceType:"script",ecmaVersion:5,childVisitorKeys:null,fallback:"iteration"}}function updateDeeply(e,s){function isHashObject(e){return"object"===typeof e&&e instanceof Object&&!(e instanceof Array)&&!(e instanceof RegExp)}for(const t in s)if(s.hasOwnProperty(t)){const n=s[t];isHashObject(n)?isHashObject(e[t])?updateDeeply(e[t],n):e[t]=updateDeeply({},n):e[t]=n}return e}function analyze(e,s){const t=updateDeeply(defaultOptions(),s);const n=new c(t);const r=new p(t,n);r.visit(e);l(null===n.__currentScope,"currentScope should be null.");return n}o={version:d,Reference:f,Variable:u,Scope:m,ScopeManager:c,analyze:analyze};var b=o;const g=o.version,h=o.Reference,y=o.Variable,j=o.Scope,v=o.ScopeManager,S=o.analyze;export default b;export{h as Reference,j as Scope,v as ScopeManager,y as Variable,S as analyze,g as version};

