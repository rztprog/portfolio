import t from"fs";import e from"path";var r={};const n=new Map;const s=t;const{dirname:o,resolve:c}=e;const lstat=t=>new Promise((e,r)=>s.lstat(t,(t,n)=>t?r(t):e(n)));const inferOwner=t=>{t=c(t);if(n.has(t))return Promise.resolve(n.get(t));const statThen=e=>{const{uid:r,gid:s}=e;n.set(t,{uid:r,gid:s});return{uid:r,gid:s}};const e=o(t);const r=e===t?null:r=>inferOwner(e).then(e=>{n.set(t,e);return e});return lstat(t).then(statThen,r)};const inferOwnerSync=t=>{t=c(t);if(n.has(t))return n.get(t);const e=o(t);let r=true;try{const o=s.lstatSync(t);r=false;const{uid:c,gid:i}=o;n.set(t,{uid:c,gid:i});return{uid:c,gid:i}}finally{if(r&&e!==t){const r=inferOwnerSync(e);n.set(t,r);return r}}};const i=new Map;r=t=>{t=c(t);if(i.has(t))return Promise.resolve(i.get(t));const e=inferOwner(t).then(e=>{i.delete(t);return e});i.set(t,e);return e};r.sync=inferOwnerSync;r.clearCache=()=>{n.clear();i.clear()};var a=r;const u=r.sync,l=r.clearCache;export default a;export{l as clearCache,u as sync};

