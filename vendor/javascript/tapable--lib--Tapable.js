import a from"util";import"./Hook.js";import"./HookCodeFactory.js";import t from"./SyncBailHook.js";var e={};const o=a;const p=t;function Tapable(){this._pluginCompat=new p(["options"]);this._pluginCompat.tap({name:"Tapable camelCase",stage:100},a=>{a.names.add(a.name.replace(/[- ]([a-z])/g,(a,t)=>t.toUpperCase()))});this._pluginCompat.tap({name:"Tapable this.hooks",stage:200},a=>{let t;for(const e of a.names){t=this.hooks[e];if(void 0!==t)break}if(void 0!==t){const e={name:a.fn.name||"unnamed compat plugin",stage:a.stage||0};a.async?t.tapAsync(e,a.fn):t.tap(e,a.fn);return true}})}e=Tapable;Tapable.addCompatLayer=function addCompatLayer(a){Tapable.call(a);a.plugin=Tapable.prototype.plugin;a.apply=Tapable.prototype.apply};Tapable.prototype.plugin=o.deprecate((function plugin(a,t){if(Array.isArray(a)){a.forEach((function(a){this.plugin(a,t)}),this);return}const e=this._pluginCompat.call({name:a,fn:t,names:new Set([a])});if(!e)throw new Error(`Plugin could not be registered at '${a}'. Hook was not found.\n`+"BREAKING CHANGE: There need to exist a hook at 'this.hooks'. "+"To create a compatibility layer for this hook, hook into 'this._pluginCompat'.")}),"Tapable.plugin is deprecated. Use new API on `.hooks` instead");Tapable.prototype.apply=o.deprecate((function apply(){for(var a=0;a<arguments.length;a++)arguments[a].apply(this)}),"Tapable.apply is deprecated. Call apply on the plugin directly instead");var n=e;export default n;

