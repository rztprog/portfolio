import r from"buffer";var e={};var f=r.Buffer;var n=Object.prototype.toString;var o="undefined"!==typeof f&&"function"===typeof f.alloc&&"function"===typeof f.allocUnsafe&&"function"===typeof f.from;function isArrayBuffer(r){return"ArrayBuffer"===n.call(r).slice(8,-1)}function fromArrayBuffer(r,e,n){e>>>=0;var t=r.byteLength-e;if(t<0)throw new RangeError("'offset' is out of bounds");if(void 0===n)n=t;else{n>>>=0;if(n>t)throw new RangeError("'length' is out of bounds")}return o?f.from(r.slice(e,e+n)):new f(new Uint8Array(r.slice(e,e+n)))}function fromString(r,e){"string"===typeof e&&""!==e||(e="utf8");if(!f.isEncoding(e))throw new TypeError('"encoding" must be a valid string encoding');return o?f.from(r,e):new f(r,e)}function bufferFrom(r,e,n){if("number"===typeof r)throw new TypeError('"value" argument must not be a number');return isArrayBuffer(r)?fromArrayBuffer(r,e,n):"string"===typeof r?fromString(r,e):o?f.from(r):new f(r)}e=bufferFrom;var t=e;export default t;

