import e from"path";var t={};const s=e;function CaseSensitivePathsPlugin(e){this.options=e||{};this.logger=this.options.logger||console;this.pathCache=new Map;this.reset()}CaseSensitivePathsPlugin.prototype.reset=function(){this.pathCache=new Map;this.fsOperations=0;this.primed=false};CaseSensitivePathsPlugin.prototype.getFilenamesInDir=function(e,t){const s=this;const i=this.compiler.inputFileSystem;this.fsOperations+=1;if(this.pathCache.has(e))t(this.pathCache.get(e));else{this.options.debug&&this.logger.log("[CaseSensitivePathsPlugin] Reading directory",e);i.readdir(e,((i,o)=>{if(i){s.options.debug&&this.logger.log("[CaseSensitivePathsPlugin] Failed to read directory",e,i);t([])}else t(o.map((e=>e.normalize?e.normalize("NFC"):e)))}))}};CaseSensitivePathsPlugin.prototype.fileExistsWithCase=function(e,t){const i=this;const o=s.dirname(e);const n=s.basename(e);const a=s.parse(o);a.dir===a.root||"."===o||i.pathCache.has(e)?t():i.getFilenamesInDir(o,(e=>{if(-1!==e.indexOf(n))i.fileExistsWithCase(o,(s=>{s||i.pathCache.set(o,e);t(s)}));else{let s="!nonexistent";for(let t=0;t<e.length;t+=1)if(e[t].toLowerCase()===n.toLowerCase()){s=`\`${e[t]}\`.`;break}t(s)}}))};CaseSensitivePathsPlugin.prototype.primeCache=function(e){if(this.primed){e();return}const t=this;const i=s.resolve();t.getFilenamesInDir(i,(s=>{t.pathCache.set(i,s);t.primed=true;e()}))};CaseSensitivePathsPlugin.prototype.apply=function(e){this.compiler=e;const onDone=()=>{this.options.debug&&this.logger.log("[CaseSensitivePathsPlugin] Total filesystem reads:",this.fsOperations);this.reset()};const checkFile=(e,t,s)=>{this.fileExistsWithCase(e,(i=>{i?"!nonexistent"===i?t.createData?s(null):s(null,t):s(new Error(`[CaseSensitivePathsPlugin] \`${e}\` does not match the corresponding path on disk ${i}`)):t.createData?s(null):s(null,t)}))};const cleanupPath=e=>e.split("?")[0].replace("\0#","#");const onAfterResolve=(e,t)=>{this.primeCache((()=>{let s=cleanupPath((e.createData||e).resource);s=s.normalize?s.normalize("NFC"):s;checkFile(s,e,t)}))};if(e.hooks){e.hooks.done.tap("CaseSensitivePathsPlugin",onDone);if(this.options.useBeforeEmitHook){this.options.debug&&this.logger.log("[CaseSensitivePathsPlugin] Using the hook for before emit.");e.hooks.emit.tapAsync("CaseSensitivePathsPlugin",((e,t)=>{let s=0;const i=[];this.primeCache((()=>{e.fileDependencies.forEach((o=>{checkFile(o,o,(o=>{s+=1;o&&i.push(o);if(s===e.fileDependencies.size){i.length&&Array.prototype.push.apply(e.errors,i);t()}}))}))}))}))}else e.hooks.normalModuleFactory.tap("CaseSensitivePathsPlugin",(e=>{e.hooks.afterResolve.tapAsync("CaseSensitivePathsPlugin",onAfterResolve)}))}else{e.plugin("done",onDone);e.plugin("normal-module-factory",(e=>{e.plugin("after-resolve",onAfterResolve)}))}};t=CaseSensitivePathsPlugin;var i=t;export default i;

