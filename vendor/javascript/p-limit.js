import e from"p-try";var t={};const n=e;const pLimit=e=>{if(!((Number.isInteger(e)||Infinity===e)&&e>0))return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));const t=[];let r=0;const next=()=>{r--;t.length>0&&t.shift()()};const run=(e,t,...o)=>{r++;const c=n(e,...o);t(c);c.then(next,next)};const enqueue=(n,o,...c)=>{r<e?run(n,o,...c):t.push(run.bind(null,n,o,...c))};const generator=(e,...t)=>new Promise(n=>enqueue(e,n,...t));Object.defineProperties(generator,{activeCount:{get:()=>r},pendingCount:{get:()=>t.length},clearQueue:{value:()=>{t.length=0}}});return generator};t=pLimit;t.default=pLimit;var r=t;export default r;

