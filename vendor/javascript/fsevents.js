import e from"process";var t={};function _nullRequire(e){var t=new Error("Cannot find module '"+e+"'");t.code="MODULE_NOT_FOUND";throw t}var n=e;if("darwin"!==n.platform)throw new Error(`Module 'fsevents' is not compatible with platform '${n.platform}'`);const o=_nullRequire("./fsevents.node");const r=o.constants;function watch(e,t,n){if("string"!==typeof e)throw new TypeError("fsevents argument 1 must be a string and not a "+typeof e);if("function"===typeof t&&"undefined"===typeof n){n=t;t=o.flags.SinceNow}if("number"!==typeof t)throw new TypeError("fsevents argument 2 must be a number and not a "+typeof t);if("function"!==typeof n)throw new TypeError("fsevents argument 3 must be a function and not a "+typeof n);let r=o.start(o.global,e,t,n);if(!r)throw new Error(`could not watch: ${e}`);return()=>{const e=r?Promise.resolve(r).then(o.stop):Promise.resolve(void 0);r=void 0;return e}}function getInfo(e,t){return{path:e,flags:t,event:getEventType(t),type:getFileType(t),changes:getFileChanges(t)}}function getFileType(e){return r.ItemIsFile&e?"file":r.ItemIsDir&e||r.MustScanSubDirs&e?"directory":r.ItemIsSymlink&e?"symlink":void 0}function anyIsTrue(e){for(let t in e)if(e[t])return true;return false}function getEventType(e){return r.ItemRemoved&e?"deleted":r.ItemRenamed&e?"moved":r.ItemCreated&e?"created":r.ItemModified&e?"modified":r.RootChanged&e?"root-changed":r.ItemCloned&e?"cloned":anyIsTrue(e)?"modified":"unknown"}function getFileChanges(e){return{inode:!!(r.ItemInodeMetaMod&e),finder:!!(r.ItemFinderInfoMod&e),access:!!(r.ItemChangeOwner&e),xattrs:!!(r.ItemXattrMod&e)}}t.watch=watch;t.getInfo=getInfo;t.constants=r;const a=t.constants;const i=t.watch,s=t.getInfo;export{a as constants,t as default,s as getInfo,i as watch};

