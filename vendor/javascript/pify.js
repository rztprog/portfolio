var e={};const processFn=(e,t)=>function(...r){const n=t.promiseModule;return new n((n,o)=>{t.multiArgs?r.push((...e)=>{if(t.errorFirst)if(e[0])o(e);else{e.shift();n(e)}else n(e)}):t.errorFirst?r.push((e,t)=>{e?o(e):n(t)}):r.push(n);e.apply(this,r)})};e=(e,t)=>{t=Object.assign({exclude:[/.+(Sync|Stream)$/],errorFirst:true,promiseModule:Promise},t);const r=typeof e;if(!(null!==e&&("object"===r||"function"===r)))throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${null===e?"null":r}\``);const filter=e=>{const match=t=>"string"===typeof t?e===t:t.test(e);return t.include?t.include.some(match):!t.exclude.some(match)};let n;n="function"===r?function(...r){return t.excludeMain?e(...r):processFn(e,t).apply(this,r)}:Object.create(Object.getPrototypeOf(e));for(const r in e){const o=e[r];n[r]="function"===typeof o&&filter(r)?processFn(o,t):o}return n};var t=e;export default t;

