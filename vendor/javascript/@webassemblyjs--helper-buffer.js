import r from"buffer";var e={};var n=r.Buffer;Object.defineProperty(e,"__esModule",{value:true});e.overrideBytesInBuffer=overrideBytesInBuffer;e.makeBuffer=makeBuffer;e.fromHexdump=fromHexdump;function _toConsumableArray(r){if(Array.isArray(r)){for(var e=0,n=new Array(r.length);e<r.length;e++)n[e]=r[e];return n}return Array.from(r)}function concatUint8Arrays(){for(var r=arguments.length,e=new Array(r),n=0;n<r;n++)e[n]=arguments[n];var t=e.reduce((function(r,e){return r+e.length}),0);var f=new Uint8Array(t);var a=0;for(var u=0;u<e.length;u++){var o=e[u];if(o instanceof Uint8Array===false)throw new Error("arr must be of type Uint8Array");f.set(o,a);a+=o.length}return f}function overrideBytesInBuffer(r,e,n,t){var f=r.slice(0,e);var a=r.slice(n,r.length);if(0===t.length)return concatUint8Arrays(f,a);var u=Uint8Array.from(t);return concatUint8Arrays(f,u,a)}function makeBuffer(){for(var r=arguments.length,e=new Array(r),n=0;n<r;n++)e[n]=arguments[n];var t=[].concat.apply([],e);return new Uint8Array(t).buffer}function fromHexdump(r){var e=r.split("\n");e=e.map((function(r){return r.trim()}));var t=e.reduce((function(r,e){var n=e.split(" ");n.shift();n=n.filter((function(r){return""!==r}));var t=n.map((function(r){return parseInt(r,16)}));r.push.apply(r,_toConsumableArray(t));return r}),[]);return n.from(t)}const t=e.__esModule;const f=e.overrideBytesInBuffer,a=e.makeBuffer,u=e.fromHexdump;export default e;export{t as __esModule,u as fromHexdump,a as makeBuffer,f as overrideBytesInBuffer};

