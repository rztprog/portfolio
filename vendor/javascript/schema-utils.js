import r from"fs";import t from"path";import o from"ajv";import a from"ajv-errors";import s from"ajv-keywords";var e={};class ValidationError extends Error{constructor(r,t){super();this.name="ValidationError";this.message=`${t||""} Invalid Options\n\n`;this.errors=r.map(r=>{r.dataPath=r.dataPath.replace(/\//g,".");return r});this.errors.forEach(r=>{this.message+=`options${r.dataPath} ${r.message}\n`});Error.captureStackTrace(this,this.constructor)}}e=ValidationError;var n=e;var i={};const c=r;const p=t;const m=o;const f=a;const h=s;const d=n;const l=new m({allErrors:true,jsonPointers:true});f(l);h(l,["instanceof","typeof"]);const validateOptions=(r,t,o)=>{if("string"===typeof r){r=c.readFileSync(p.resolve(r),"utf8");r=JSON.parse(r)}if(!l.validate(r,t))throw new d(l.errors,o);return true};i=validateOptions;var v=i;var u={};const E=v;u=E;var g=u;export default g;

